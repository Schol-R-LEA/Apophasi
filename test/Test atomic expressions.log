%%%% Starting test Test atomic expressions
Group begin: Test atomic expressions
Group begin: self-evaluating expressions
Test begin:
  test-name: "integer"
  source-file: "/home/schol-r-lea/Documents/Programming/Projects/Apophasi/test/test-eval.scm"
  source-line: 30
  source-form: (test-equal "integer" 1 (apophasi:eval 1 (quote ())))
Test end:
  expected-value: 1
  actual-value: 1
  result-kind: pass
Test begin:
  test-name: "hex integer"
  source-file: "/home/schol-r-lea/Documents/Programming/Projects/Apophasi/test/test-eval.scm"
  source-line: 31
  source-form: (test-equal "hex integer" 3735928559 (apophasi:eval 3735928559 (quote ())))
Test end:
  expected-value: 3735928559
  actual-value: 3735928559
  result-kind: pass
Test begin:
  test-name: "flonum"
  source-file: "/home/schol-r-lea/Documents/Programming/Projects/Apophasi/test/test-eval.scm"
  source-line: 32
  source-form: (test-equal "flonum" 3.1415 (apophasi:eval 3.1415 (quote ())))
Test end:
  expected-value: 3.1415
  actual-value: 3.1415
  result-kind: pass
Test begin:
  test-name: "rational number"
  source-file: "/home/schol-r-lea/Documents/Programming/Projects/Apophasi/test/test-eval.scm"
  source-line: 33
  source-form: (test-equal "rational number" 17/23 (apophasi:eval 17/23 (quote ())))
Test end:
  expected-value: 17/23
  actual-value: 17/23
  result-kind: pass
Test begin:
  test-name: "complex number"
  source-file: "/home/schol-r-lea/Documents/Programming/Projects/Apophasi/test/test-eval.scm"
  source-line: 34
  source-form: (test-equal "complex number" 5+42i (apophasi:eval 5+42i (quote ())))
Test end:
  expected-value: 5+42i
  actual-value: 5+42i
  result-kind: pass
Test begin:
  test-name: "character"
  source-file: "/home/schol-r-lea/Documents/Programming/Projects/Apophasi/test/test-eval.scm"
  source-line: 35
  source-form: (test-equal "character" #\a (apophasi:eval #\a (quote ())))
Test end:
  expected-value: #\a
  actual-value: #\a
  result-kind: pass
Test begin:
  test-name: "character constant"
  source-file: "/home/schol-r-lea/Documents/Programming/Projects/Apophasi/test/test-eval.scm"
  source-line: 36
  source-form: (test-equal "character constant" #\newline (apophasi:eval #\newline (quote ())))
Test end:
  expected-value: #\newline
  actual-value: #\newline
  result-kind: pass
Test begin:
  test-name: "string"
  source-file: "/home/schol-r-lea/Documents/Programming/Projects/Apophasi/test/test-eval.scm"
  source-line: 37
  source-form: (test-equal "string" "Why not go mad?" (apophasi:eval "Why not go mad?" (quote ())))
Test end:
  expected-value: "Why not go mad?"
  actual-value: "Why not go mad?"
  result-kind: pass
Group end: self-evaluating expressions
Group begin: quoted expressions
Test begin:
  test-name: "quoted symbol"
  source-file: "/home/schol-r-lea/Documents/Programming/Projects/Apophasi/test/test-eval.scm"
  source-line: 41
  source-form: (test-equal "quoted symbol" (quasiquote foo) (apophasi:eval (quote foo) (quote ())))
Test end:
  expected-value: foo
  actual-value: #f
  result-kind: fail
Test begin:
  test-name: "quoted list of numbers"
  source-file: "/home/schol-r-lea/Documents/Programming/Projects/Apophasi/test/test-eval.scm"
  source-line: 42
  source-form: (test-equal "quoted list of numbers" (quote (1 2)) (apophasi:eval (quote (1 2)) (quote ())))
Test end:
  expected-value: {1 2}
  actual-value: #f
  result-kind: fail
Test begin:
  test-name: "quoted list of symbols"
  source-file: "/home/schol-r-lea/Documents/Programming/Projects/Apophasi/test/test-eval.scm"
  source-line: 45
  source-form: (test-equal "quoted list of symbols" (quote (foo bar)) (apophasi:eval (quote (foo bar)) (quote ())))
Test end:
  expected-value: {foo bar}
  actual-value: #f
  result-kind: fail
Test begin:
  test-name: "quoted nested list of symbols"
  source-file: "/home/schol-r-lea/Documents/Programming/Projects/Apophasi/test/test-eval.scm"
  source-line: 48
  source-form: (test-equal "quoted nested list of symbols" (quote ((foo) (bar baz) quux)) (apophasi:eval (quote ((foo) (bar baz) quux)) (quote ())))
Test end:
  expected-value: {{foo} {bar baz} quux}
  actual-value: #f
  result-kind: fail
Group end: quoted expressions
Group end: Test atomic expressions
